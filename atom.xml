<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>leo&#39;s blog</title>
  
  <subtitle>手松开你才能乘托更多的东西</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-19T16:31:47.824Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>leo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java NIO系列（三） Buffer</title>
    <link href="http://yoursite.com/2019/01/20/nio-Buffer/"/>
    <id>http://yoursite.com/2019/01/20/nio-Buffer/</id>
    <published>2019-01-19T16:18:20.000Z</published>
    <updated>2019-01-19T16:31:47.824Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Buffer</p></blockquote><p><a href="http://tutorials.jenkov.com/java-nio/overview.html" target="_blank" rel="noopener">原文链接</a></p><p>Java NIO中的Buffer用于和NIO通道进行交互。如你所知，数据从通道读入缓冲区，从缓冲区写入到通道中。</p><p>下面是NIO Buffer相关的话题列表：</p><ol><li><a href="">Buffer的基本用法</a></li><li><a href="">Buffer的capacity,position和limit</a></li><li><a href="">Buffer的类型</a></li><li><a href="">Buffer的分配</a></li><li><a href="">向Buffer中写数据</a></li><li><a href="">flip()方法</a></li><li><a href="">从Buffer中读取数据</a></li><li><a href="">clear()与compact()方法</a></li><li><a href="">mark()与reset()方法</a></li><li><p><a href="">equals()与compareTo()方法</a></p><p><strong>Buffer的基本用法</strong><div id="base"></div></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Buffer&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://tutorials.jenkov.com/java-nio/overview.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文链接
      
    
    </summary>
    
      <category term="Java nio" scheme="http://yoursite.com/categories/Java-nio/"/>
    
    
      <category term="Java nio干货系列" scheme="http://yoursite.com/tags/Java-nio%E5%B9%B2%E8%B4%A7%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Java NIO系列（二） Channel</title>
    <link href="http://yoursite.com/2019/01/19/nio-Channel/"/>
    <id>http://yoursite.com/2019/01/19/nio-Channel/</id>
    <published>2019-01-19T15:50:38.000Z</published>
    <updated>2019-01-19T16:07:21.816Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Channel</p></blockquote><p><a href="http://tutorials.jenkov.com/java-nio/overview.html" target="_blank" rel="noopener">原文链接</a></p><p>Java NIO的通道类似流，但又有些不同：</p><ul><li>既可以从通道中读取数据，又可以写数据到通道。但流的读写通常是单向的。</li><li>通道可以异步地读写。</li><li><p>通道中的数据总是要先读到一个Buffer，或者总是要从一个Buffer中写入。</p><p>正如上面所说，从通道读取数据到缓冲区，从缓冲区写入数据到通道。如下图所示：</p><p><img src="https://fishmc.github.io/img/javanio/overview-channels-buffers.png" alt=""></p><p><strong>Channel的实现</strong></p><p>这些是Java NIO中最重要的通道的实现：</p></li><li>FileChannel</li><li>DatagramChannel</li><li>SocketChannel</li><li><p>ServerSocketChannel</p><p>FileChannel 从文件中读写数据。<br>DatagramChannel 能通过UDP读写网络中的数据<br>SocketChannel 能通过TCP读写网络中的数据<br>ServerSocketChannel 可以监听新进来的TCP连接，像Web服务器那样。对每一个新进来的连接都会创建一个SocketChannel。</p><p><strong>基本的 Channel 示例</strong></p><p>下面是一个使用FileChannel读取数据到Buffer中的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">RandomAccessFile aFile = <span class="keyword">new</span> RandomAccessFile(<span class="string">"data/nio-data.txt"</span>, <span class="string">"rw"</span>);</span><br><span class="line">FileChannel inChannel = aFile.getChannel();</span><br><span class="line"></span><br><span class="line">ByteBuffer buf = ByteBuffer.allocate(<span class="number">48</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> bytesRead = inChannel.read(buf);</span><br><span class="line"><span class="keyword">while</span> (bytesRead != -<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Read "</span> + bytesRead);</span><br><span class="line">buf.flip();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(buf.hasRemaining())&#123;</span><br><span class="line">System.out.print((<span class="keyword">char</span>) buf.get());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">buf.clear();</span><br><span class="line">bytesRead = inChannel.read(buf);</span><br><span class="line">&#125;</span><br><span class="line">aFile.close();</span><br></pre></td></tr></table></figure></li></ul><p>注意 buf.flip() 的调用，首先读取数据到Buffer，然后反转Buffer,接着再从Buffer中读取数据。下一节会深入讲解Buffer的更多细节。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Channel&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://tutorials.jenkov.com/java-nio/overview.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文链
      
    
    </summary>
    
      <category term="Java nio" scheme="http://yoursite.com/categories/Java-nio/"/>
    
    
      <category term="Java nio干货系列" scheme="http://yoursite.com/tags/Java-nio%E5%B9%B2%E8%B4%A7%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Java NIO系列（一） Java NIO 概述</title>
    <link href="http://yoursite.com/2019/01/19/hexo-hexo/"/>
    <id>http://yoursite.com/2019/01/19/hexo-hexo/</id>
    <published>2019-01-19T08:30:04.000Z</published>
    <updated>2019-01-19T15:47:35.126Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Java NIO 概述</p></blockquote><p><a href="http://tutorials.jenkov.com/java-nio/overview.html" target="_blank" rel="noopener">原文链接</a></p><p><strong>Java NIO 由以下几个核心部分组成：</strong></p><ul><li>Channels</li><li>Buffers</li><li>Selectors</li></ul><p>虽然Java NIO 中除此之外还有很多类和组件，但在我看来，Channel，Buffer 和 Selector 构成了核心的API。其它组件，如Pipe和FileLock，只不过是与三个核心组件共同使用的工具类。因此，在概述中我将集中在这三个组件上。其它组件会在单独的章节中讲到。</p><p><strong>Channel 和 Buffer</strong></p><p>基本上，所有的 IO 在NIO 中都从一个<strong>Channel</strong> 开始。Channel 有点象流。 数据可以从Channel读到Buffer中，也可以从Buffer 写到Channel中。这里有个图示：</p><p><img src="https://fishmc.github.io/img/javanio/overview-channels-buffers1.png" alt=""></p><p>Channel和Buffer有好几种类型。下面是JAVA NIO中的一些主要Channel的实现：</p><ul><li>FileChannel</li><li>DatagramChannel</li><li>SocketChannel</li><li>ServerSocketChannel</li></ul><p>正如你所看到的，这些通道涵盖了UDP 和 TCP 网络IO，以及文件IO。</p><p>与这些类一起的有一些有趣的接口，但为简单起见，我尽量在概述中不提到它们。本教程其它章节与它们相关的地方我会进行解释。</p><p>以下是Java NIO里关键的Buffer实现：</p><ul><li>ByteBuffer</li><li>CharBuffer</li><li>DoubleBuffer</li><li>FloatBuffer</li><li>IntBuffer</li><li>LongBuffer</li><li>ShortBuffer</li></ul><p>这些Buffer覆盖了你能通过IO发送的基本数据类型：byte, short, int, long, float, double 和 char。<br>Java NIO 还有个 MappedByteBuffer，用于表示内存映射文件， 我也不打算在概述中说明。</p><p><strong>Selector</strong></p><p>Selector允许单线程处理多个 Channel。如果你的应用打开了多个连接（通道），但每个连接的流量都很低，使用Selector就会很方便。例如，在一个聊天服务器中。<br>这是在一个单线程中使用一个Selector处理3个Channel的图示：</p><p><img src="https://fishmc.github.io/img/javanio/overview-selectors.png" alt=""></p><p>要使用Selector，得向Selector注册Channel，然后调用它的select()方法。这个方法会一直阻塞到某个注册的通道有事件就绪。一旦这个方法返回，线程就可以处理这些事件，事件的例子有如新连接进来，数据接收等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Java NIO 概述&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://tutorials.jenkov.com/java-nio/overview.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;
      
    
    </summary>
    
      <category term="Java nio" scheme="http://yoursite.com/categories/Java-nio/"/>
    
    
      <category term="Java nio干货系列" scheme="http://yoursite.com/tags/Java-nio%E5%B9%B2%E8%B4%A7%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
</feed>
