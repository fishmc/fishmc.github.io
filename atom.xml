<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>leo&#39;s blog</title>
  
  <subtitle>手松开你才能乘托更多的东西</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-19T09:40:33.069Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>leo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nio-1</title>
    <link href="http://yoursite.com/2019/01/19/nio-1/"/>
    <id>http://yoursite.com/2019/01/19/nio-1/</id>
    <published>2019-01-19T09:40:33.000Z</published>
    <updated>2019-01-19T09:40:33.069Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java NIO系列（一） Java NIO 概述</title>
    <link href="http://yoursite.com/2019/01/19/hexo-hexo/"/>
    <id>http://yoursite.com/2019/01/19/hexo-hexo/</id>
    <published>2019-01-19T08:30:04.000Z</published>
    <updated>2019-01-19T15:45:36.187Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Java NIO 概述</p></blockquote><p><a href="http://tutorials.jenkov.com/java-nio/overview.html" target="_blank" rel="noopener">原文链接</a></p><p><strong>Java NIO 由以下几个核心部分组成：</strong></p><ul><li>Channels</li><li>Buffers</li><li>Selectors</li></ul><p>虽然Java NIO 中除此之外还有很多类和组件，但在我看来，Channel，Buffer 和 Selector 构成了核心的API。其它组件，如Pipe和FileLock，只不过是与三个核心组件共同使用的工具类。因此，在概述中我将集中在这三个组件上。其它组件会在单独的章节中讲到。</p><p><strong>Channel 和 Buffer</strong></p><p>基本上，所有的 IO 在NIO 中都从一个<strong>Channel</strong> 开始。Channel 有点象流。 数据可以从Channel读到Buffer中，也可以从Buffer 写到Channel中。这里有个图示：</p><p><img src="https://fishmc.github.io/img/javanio/overview-channels-buffers1.png" alt=""></p><p>Channel和Buffer有好几种类型。下面是JAVA NIO中的一些主要Channel的实现：</p><ul><li>FileChannel</li><li>DatagramChannel</li><li>SocketChannel</li><li>ServerSocketChannel</li></ul><p>正如你所看到的，这些通道涵盖了UDP 和 TCP 网络IO，以及文件IO。</p><p>与这些类一起的有一些有趣的接口，但为简单起见，我尽量在概述中不提到它们。本教程其它章节与它们相关的地方我会进行解释。</p><p>以下是Java NIO里关键的Buffer实现：</p><ul><li>ByteBuffer</li><li>CharBuffer</li><li>DoubleBuffer</li><li>FloatBuffer</li><li>IntBuffer</li><li>LongBuffer</li><li>ShortBuffer</li></ul><p>这些Buffer覆盖了你能通过IO发送的基本数据类型：byte, short, int, long, float, double 和 char。<br>Java NIO 还有个 MappedByteBuffer，用于表示内存映射文件， 我也不打算在概述中说明。</p><p><strong>Selector</strong></p><p>Selector允许单线程处理多个 Channel。如果你的应用打开了多个连接（通道），但每个连接的流量都很低，使用Selector就会很方便。例如，在一个聊天服务器中。<br>这是在一个单线程中使用一个Selector处理3个Channel的图示：</p><p><img src="../../public/img/javanio/overview-selectors.png" alt=""></p><p>要使用Selector，得向Selector注册Channel，然后调用它的select()方法。这个方法会一直阻塞到某个注册的通道有事件就绪。一旦这个方法返回，线程就可以处理这些事件，事件的例子有如新连接进来，数据接收等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Java NIO 概述&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://tutorials.jenkov.com/java-nio/overview.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;
      
    
    </summary>
    
      <category term="Java nio" scheme="http://yoursite.com/categories/Java-nio/"/>
    
    
      <category term="Java nio干货系列" scheme="http://yoursite.com/tags/Java-nio%E5%B9%B2%E8%B4%A7%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>hexo干货系列</title>
    <link href="http://yoursite.com/2019/01/19/my-new-post/"/>
    <id>http://yoursite.com/2019/01/19/my-new-post/</id>
    <published>2019-01-19T07:41:40.000Z</published>
    <updated>2019-01-19T08:08:46.443Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>hexo干货系列：（一）hexo+gitHub搭建个人独立博客</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr><p>一直想要一个自己的独立博客，但是觉得申请域名+服务器的太麻烦了就一直没有实现。偶然机会发现Hexo这个优秀的静态博客框架，再搭配现在流行的gitHub，简直是完美写博客的黄金搭档（免费+方便）。于是就上网参考了好多教程最后磕磕碰碰的搭建了起来。但是网上的教程多多少少都有点问题，可能比较早吧。就有了这个自己总结的教程，一是自己总结一下。二是给也想搭建Hexo博客的童鞋们多一点参考。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><hr><p>我这个教程是基于Ubuntu用户的，Hexo3版本</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;hexo干货系列：（一）hexo+gitHub搭建个人独立博客&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;hr&gt;
&lt;p
      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo干货系列" scheme="http://yoursite.com/tags/hexo%E5%B9%B2%E8%B4%A7%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
</feed>
